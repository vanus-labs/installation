kind: ConfigMap
metadata:
  name: config-controller
  namespace: vanus
apiVersion: v1
data:
  controller.yaml: |-
    node_id: ${NODE_ID}
    name: ${POD_NAME}
    ip: ${POD_IP}
    port: 2048
    replicas: 3
    segment_capacity: 4194304
    secret_encryption_salt: "encryption_salt"
    root_controllers:
      - vanus-root-controller-0.vanus-root-controller:2021
      - vanus-root-controller-1.vanus-root-controller:2021
      - vanus-root-controller-2.vanus-root-controller:2021
    observability:
      metrics:
        enable: true
      tracing:
        enable: false
        # OpenTelemetry Collector endpoint, https://opentelemetry.io/docs/collector/getting-started/
        otel_collector: http://127.0.0.1:4318
    cluster:
      component_name: controller
      lease_duration_in_sec: 15
      etcd:
        - vanus-etcd-0.vanus-etcd:2379
        - vanus-etcd-1.vanus-etcd:2379
        - vanus-etcd-2.vanus-etcd:2379
      topology:
        vanus-controller-0: vanus-controller-0.vanus-controller.vanus.svc:2048
        vanus-controller-1: vanus-controller-1.vanus-controller.vanus.svc:2048
        vanus-controller-2: vanus-controller-2.vanus-controller.vanus.svc:2048
---
apiVersion: v1
kind: Service
metadata:
  name: vanus-controller
  namespace: vanus
spec:
  clusterIP: None
  ports:
    - name: vanus-controller
      port: 2048
  selector:
    app: vanus-controller
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: vanus-controller
  name: vanus-controller
  namespace: vanus
spec:
  replicas: 3
  selector:
    matchLabels:
      app: vanus-controller
  serviceName: vanus-controller
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
      labels:
        app: vanus-controller
    spec:
      nodeSelector:
        type: storage
      containers:
        - command:
            - /bin/sh
            - -c
            - NODE_ID=${HOSTNAME##*-} /vanus/bin/controller
          env:
            - name: VANUS_LOG_LEVEL
              value: DEBUG
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          image: public.ecr.aws/vanus/controller:6b23e5a
          imagePullPolicy: IfNotPresent
          name: controller
          resources:
            limits:
              cpu: 1000m
              memory: 4000Mi
            requests:
              cpu: 1000m
              memory: 4000Mi
          ports:
            - containerPort: 2048
              name: grpc
            - containerPort: 2379
              name: etcd-client
            - containerPort: 2380
              name: etcd-peer
            - containerPort: 2112
              protocol: TCP
              name: metrics
          volumeMounts:
            - mountPath: /vanus/config
              name: config-controller
            - mountPath: /data
              name: data
        - name: node-exporter
          image: prom/node-exporter
          args:
            - --no-collector.wifi
            - --no-collector.hwmon
            - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
            - --collector.netclass.ignored-devices=^(veth.*)$
          ports:
            - containerPort: 9100
              protocol: TCP
              name: metrics
          resources:
            limits:
              cpu: 250m
              memory: 180Mi
            requests:
              cpu: 102m
              memory: 180Mi
      volumes:
        - configMap:
            name: config-controller
          name: config-controller
  volumeClaimTemplates:
    - metadata:
        labels:
          app: vanus-controller
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: gp3
        resources:
          requests:
            storage: 20Gi