apiVersion: v1
kind: Namespace
metadata:
  name: vanus
---
apiVersion: v1
data:
  controller.yaml: |-
    node_id: ${NODE_ID}
    name: ${POD_NAME}
    ip: ${POD_IP}
    port: 2048
    replicas: 3
    segment_capacity: 4194304
    secret_encryption_salt: "encryption_salt"
    root_controllers:
      - vanus-root-controller-0.vanus-root-controller:2021
      - vanus-root-controller-1.vanus-root-controller:2021
      - vanus-root-controller-2.vanus-root-controller:2021
    observability:
      metrics:
        enable: true
      tracing:
        enable: false
        # OpenTelemetry Collector endpoint, https://opentelemetry.io/docs/collector/getting-started/
        otel_collector: http://127.0.0.1:4318
    cluster:
      component_name: controller
      lease_duration_in_sec: 15
      etcd:
        - vanus-etcd-0.vanus-etcd:2379
        - vanus-etcd-1.vanus-etcd:2379
        - vanus-etcd-2.vanus-etcd:2379
      topology:
        vanus-controller-0: vanus-controller-0.vanus-controller.vanus.svc:2048
        vanus-controller-1: vanus-controller-1.vanus-controller.vanus.svc:2048
        vanus-controller-2: vanus-controller-2.vanus-controller.vanus.svc:2048
kind: ConfigMap
metadata:
  name: config-controller
  namespace: vanus
---
apiVersion: v1
data:
  gateway.yaml: |-
    port: 8080
    sink_port: 8082
    controllers:
      - vanus-controller-0.vanus-controller:2048
      - vanus-controller-1.vanus-controller:2048
      - vanus-controller-2.vanus-controller:2048
kind: ConfigMap
metadata:
  name: config-gateway
  namespace: vanus
---
apiVersion: v1
data:
  root.yaml: |-
    node_id: ${NODE_ID}
    name: ${POD_NAME}
    ip: ${POD_IP}
    port: 2021
    observability:
      metrics:
        enable: true
      tracing:
        enable: false
        # OpenTelemetry Collector endpoint, https://opentelemetry.io/docs/collector/getting-started/
        otel_collector: http://127.0.0.1:4318
    cluster:
      component_name: root-controller
      lease_duration_in_sec: 15
      etcd:
        - vanus-etcd-0.vanus-etcd:2379
        - vanus-etcd-1.vanus-etcd:2379
        - vanus-etcd-2.vanus-etcd:2379
      topology:
        vanus-root-controller-0: vanus-root-controller-0.vanus-root-controller.vanus.svc:2021
        vanus-root-controller-1: vanus-root-controller-1.vanus-root-controller.vanus.svc:2021
kind: ConfigMap
metadata:
  name: config-root-controller
  namespace: vanus
---
apiVersion: v1
data:
  store.yaml: |-
    port: 11811
    ip: ${POD_IP}
    controllers:
      - vanus-controller-0.vanus-controller:2048
      - vanus-controller-1.vanus-controller:2048
      - vanus-controller-2.vanus-controller:2048
    volume:
      id: ${VOLUME_ID}
      dir: /data
      capacity: 1073741824
    meta_store:
      wal:
        io:
          engine: psync
    offset_store:
      wal:
        io:
          engine: psync
    raft:
      wal:
        io:
          engine: psync
kind: ConfigMap
metadata:
  name: config-store
  namespace: vanus
---
apiVersion: v1
data:
  timer.yaml: |-
    name: "timer"
    ip: ${POD_IP}
    etcd:
      - vanus-etcd-0.vanus-etcd:2379
      - vanus-etcd-1.vanus-etcd:2379
      - vanus-etcd-2.vanus-etcd:2379
    leader_election:
      lease_duration: 15
    timingwheel:
      tick: 1
      wheel_size: 32
      layers: 4
    controllers:
      - vanus-controller-0.vanus-controller.vanus.svc:2048
      - vanus-controller-1.vanus-controller.vanus.svc:2048
      - vanus-controller-2.vanus-controller.vanus.svc:2048
kind: ConfigMap
metadata:
  name: config-timer
  namespace: vanus
---
apiVersion: v1
data:
  trigger.yaml: |-
    port: 2148
    ip : ${POD_IP}
    controllers:
      - vanus-controller-0.vanus-controller.vanus.svc:2048
      - vanus-controller-1.vanus-controller.vanus.svc:2048
      - vanus-controller-2.vanus-controller.vanus.svc:2048
kind: ConfigMap
metadata:
  name: config-trigger
  namespace: vanus
---
apiVersion: v1
kind: Service
metadata:
  name: vanus-controller
  namespace: vanus
spec:
  clusterIP: None
  ports:
  - name: vanus-controller
    port: 2048
  selector:
    app: vanus-controller
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vanus-etcd
  name: vanus-etcd
  namespace: vanus
spec:
  clusterIP: None
  clusterIPs:
  - None
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: client
    port: 2379
    protocol: TCP
    targetPort: client
  - name: peer
    port: 2380
    protocol: TCP
    targetPort: peer
  publishNotReadyAddresses: true
  selector:
    app: vanus-etcd
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: vanus-gateway
  namespace: vanus
spec:
  ports:
  - name: proxy
    nodePort: 30001
    port: 8080
    targetPort: 8080
  - name: cloudevents
    nodePort: 30002
    port: 8081
    targetPort: 8081
  selector:
    app: vanus-gateway
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  name: vanus-root-controller
  namespace: vanus
spec:
  clusterIP: None
  ports:
  - name: vanus-root-controller
    port: 2021
  selector:
    app: vanus-root-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vanus-gateway
  name: vanus-gateway
  namespace: vanus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vanus-gateway
  template:
    metadata:
      annotations:
        vanus.dev/metrics.port: "2112"
      labels:
        app: vanus-gateway
    spec:
      containers:
      - env:
        - name: VANUS_LOG_LEVEL
          value: INFO
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: public.ecr.aws/vanus/gateway:v0.7.0
        imagePullPolicy: IfNotPresent
        name: gateway
        ports:
        - containerPort: 8080
          name: proxy
        - containerPort: 8081
          name: cloudevents
        - containerPort: 8082
          name: sinkproxy
        volumeMounts:
        - mountPath: /vanus/config
          name: config-gateway
      volumes:
      - configMap:
          name: config-gateway
        name: config-gateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vanus-timer
  name: vanus-timer
  namespace: vanus
spec:
  replicas: 2
  selector:
    matchLabels:
      app: vanus-timer
  template:
    metadata:
      annotations:
        vanus.dev/metrics.port: "2112"
      labels:
        app: vanus-timer
    spec:
      containers:
      - env:
        - name: VANUS_LOG_LEVEL
          value: INFO
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: public.ecr.aws/vanus/timer:v0.7.0
        imagePullPolicy: IfNotPresent
        name: timer
        volumeMounts:
        - mountPath: /vanus/config
          name: config-timer
      volumes:
      - configMap:
          name: config-timer
        name: config-timer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vanus-trigger
  name: vanus-trigger
  namespace: vanus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vanus-trigger
  template:
    metadata:
      annotations:
        vanus.dev/metrics.port: "2112"
      labels:
        app: vanus-trigger
    spec:
      containers:
      - env:
        - name: VANUS_LOG_LEVEL
          value: INFO
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: public.ecr.aws/vanus/trigger:v0.7.0
        imagePullPolicy: IfNotPresent
        name: trigger
        ports:
        - containerPort: 2148
          name: grpc
        volumeMounts:
        - mountPath: /vanus/config
          name: config-trigger
      volumes:
      - configMap:
          name: config-trigger
        name: config-trigger
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: vanus-controller
  name: vanus-controller
  namespace: vanus
spec:
  replicas: 3
  selector:
    matchLabels:
      app: vanus-controller
  serviceName: vanus-controller
  template:
    metadata:
      annotations:
        vanus.dev/metrics.port: "2112"
      labels:
        app: vanus-controller
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - NODE_ID=${HOSTNAME##*-} /vanus/bin/controller
        env:
        - name: VANUS_LOG_LEVEL
          value: INFO
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: public.ecr.aws/vanus/controller:v0.7.0
        imagePullPolicy: IfNotPresent
        name: controller
        ports:
        - containerPort: 2048
          name: grpc
        - containerPort: 2112
          name: metrics
        volumeMounts:
        - mountPath: /vanus/config
          name: config-controller
      volumes:
      - configMap:
          name: config-controller
        name: config-controller
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: vanus-etcd
  name: vanus-etcd
  namespace: vanus
spec:
  podManagementPolicy: Parallel
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: vanus-etcd
  serviceName: vanus-etcd
  template:
    metadata:
      labels:
        app: vanus-etcd
    spec:
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: MY_STS_NAME
          value: vanus-etcd
        - name: ETCDCTL_API
          value: "3"
        - name: ETCD_ON_K8S
          value: "yes"
        - name: ETCD_START_FROM_SNAPSHOT
          value: "no"
        - name: ETCD_INIT_SNAPSHOT_FILENAME
          value: snapshotdb
        - name: ETCD_DISASTER_RECOVERY
          value: "no"
        - name: ETCD_NAME
          value: $(MY_POD_NAME)
        - name: ETCD_DATA_DIR
          value: /bitnami/etcd/data
        - name: ETCD_LOG_LEVEL
          value: info
        - name: ALLOW_NONE_AUTHENTICATION
          value: "yes"
        - name: ETCD_ADVERTISE_CLIENT_URLS
          value: http://$(MY_POD_NAME).vanus-etcd.vanus.svc.cluster.local:2379,http://vanus-etcd.vanus.svc.cluster.local:2379
        - name: ETCD_LISTEN_CLIENT_URLS
          value: http://0.0.0.0:2379
        - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
          value: http://$(MY_POD_NAME).vanus-etcd.vanus.svc.cluster.local:2380
        - name: ETCD_LISTEN_PEER_URLS
          value: http://0.0.0.0:2380
        - name: ETCD_INITIAL_CLUSTER_STATE
          value: new
        - name: ETCD_INITIAL_CLUSTER
          value: vanus-etcd-0=http://vanus-etcd-0.vanus-etcd.vanus.svc.cluster.local:2380,vanus-etcd-1=http://vanus-etcd-1.vanus-etcd.vanus.svc.cluster.local:2380,vanus-etcd-2=http://vanus-etcd-2.vanus-etcd.vanus.svc.cluster.local:2380
        - name: ETCD_CLUSTER_DOMAIN
          value: vanus-etcd.vanus.svc.cluster.local
        image: public.ecr.aws/vanus/etcd:v3.5.7
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /opt/bitnami/scripts/etcd/prestop.sh
        livenessProbe:
          exec:
            command:
            - /opt/bitnami/scripts/etcd/healthcheck.sh
          failureThreshold: 5
          initialDelaySeconds: 60
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        name: etcd
        ports:
        - containerPort: 2379
          name: client
          protocol: TCP
        - containerPort: 2380
          name: peer
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /opt/bitnami/scripts/etcd/healthcheck.sh
          failureThreshold: 5
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /bitnami/etcd
          name: data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1001
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        app: vanus-etcd
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      volumeMode: Filesystem
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: vanus-root-controller
  name: vanus-root-controller
  namespace: vanus
spec:
  replicas: 2
  selector:
    matchLabels:
      app: vanus-root-controller
  serviceName: vanus-root-controller
  template:
    metadata:
      annotations:
        vanus.dev/metrics.port: "2112"
      labels:
        app: vanus-root-controller
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - NODE_ID=${HOSTNAME##*-} /vanus/bin/root-controller
        env:
        - name: VANUS_LOG_LEVEL
          value: INFO
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: public.ecr.aws/vanus/root-controller:v0.7.0
        imagePullPolicy: IfNotPresent
        name: controller
        ports:
        - containerPort: 2021
          name: grpc
        - containerPort: 2112
          name: metrics
        volumeMounts:
        - mountPath: /vanus/config
          name: config-root-controller
      volumes:
      - configMap:
          name: config-root-controller
        name: config-root-controller
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: vanus-store
  name: vanus-store
  namespace: vanus
spec:
  replicas: 3
  selector:
    matchLabels:
      app: vanus-store
  serviceName: vanus-store
  template:
    metadata:
      annotations:
        vanus.dev/metrics.port: "2112"
      labels:
        app: vanus-store
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - VOLUME_ID=${HOSTNAME##*-} /vanus/bin/store
        env:
        - name: VANUS_LOG_LEVEL
          value: INFO
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: public.ecr.aws/vanus/store:v0.7.0
        imagePullPolicy: IfNotPresent
        name: store
        ports:
        - containerPort: 11811
          name: grpc
        volumeMounts:
        - mountPath: /vanus/config
          name: config-store
        - mountPath: /data
          name: data
      volumes:
      - configMap:
          name: config-store
        name: config-store
  volumeClaimTemplates:
  - metadata:
      labels:
        app: vanus-controller
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
